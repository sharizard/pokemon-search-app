{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","undefined","result","setResult","error","setError","fetchPokemon","name","axios","toLowerCase","then","data","console","log","status","catch","handleError","type","onBlur","event","target","value","className","src","sprites","front_default","alt","Boolean","window","location","hostname","match","Pokemons","mount","ReactDOM","render","document","getElementById","unmount","element","unmountComponentAtNode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4QA8DeA,EAjDO,WAAO,IAAD,EACEC,wBAAuCC,GADzC,mBACnBC,EADmB,KACXC,EADW,OAEAH,mBAAS,IAFT,mBAEnBI,EAFmB,KAEZC,EAFY,KAUpBC,EAAe,SAACC,GACfA,GAELC,IAAM,GAAD,OAtBW,oCAsBX,YAAmBD,EAAKE,gBAC1BC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACQ,MAAhBA,EAAKG,QACPX,EAAUQ,EAAKA,SAGlBI,OAAM,SAACX,GAAD,OAhBS,SAACA,GACnBQ,QAAQR,MAAMA,GACdD,OAAUF,GACVI,EAAS,qBAaWW,CAAYZ,OAUlC,OACE,oCACE,kDACA,2BAAOa,KAAK,OAAOV,KAAK,UAAUW,OAVvB,SAACC,GACVA,GAASA,EAAMC,SACjBf,EAAS,IACTC,EAAaa,EAAMC,OAAOC,WAQzBjB,GAAS,uBAAGkB,UAAU,IAAIlB,GAC1BF,GACC,yBAAKoB,UAAU,QACb,yBAAKA,UAAU,eAAeC,IAAKrB,EAAOsB,QAAQC,cAAeC,IAAI,YACrE,yBAAKJ,UAAU,QACb,wBAAIA,UAAU,cACXpB,EAAOK,UCzCFoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXLH,OAAeI,SAAW,CACvBC,MAAO,WACHC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,cAErDC,QAAS,WACL,IAAMC,EAAUH,SAASC,eAAe,YACpCE,GACAL,IAASM,uBAAuBD,KD2HtC,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.41a83b34.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nconst POKEMON_URL = 'https://pokeapi.co/api/v2/pokemon';\n\ninterface IPokemonResponse {\n  name: string;\n  sprites: {\n    front_default: string;\n  }\n};\n\nconst App: React.FC = () => {\n  const [result, setResult] = useState<IPokemonResponse | undefined>(undefined);\n  const [error, setError] = useState('');\n\n  const handleError = (error: any) => {\n    console.error(error);\n    setResult(undefined);\n    setError(\"Pokemon not found\");\n  };\n\n  const fetchPokemon = (name: string) => {\n    if (!name) return;\n\n    axios(`${POKEMON_URL}/${name.toLowerCase()}`)\n      .then((data) => {\n        console.log(data);\n        if (data.status === 200) {\n          setResult(data.data)\n        }\n      })\n      .catch((error) => handleError(error));\n  };\n\n  const submit = (event: any) => {\n    if (event && event.target) {\n      setError('');\n      fetchPokemon(event.target.value);\n    }\n  };\n\n  return (\n    <>\n      <h1>Search for pokemon</h1>\n      <input type=\"text\" name=\"Pokemon\" onBlur={submit} />\n      {error && <p className=\"\">{error}</p>}\n      {result &&\n        <div className=\"card\">\n          <img className=\"card-img-top\" src={result.sprites.front_default} alt=\"Pokemon\" />\n          <div className=\"body\">\n            <h4 className=\"card-title\">\n              {result.name}\n            </h4>\n          </div>\n        </div>\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n(window as any).Pokemons = {\n    mount: () => {\n        ReactDOM.render(<App />, document.getElementById('pokemons'));\n    },\n    unmount: () => {\n        const element = document.getElementById('pokemons');\n        if (element) {\n            ReactDOM.unmountComponentAtNode(element);\n        }\n    }\n};\n\n// ReactDOM.render(<App />, document.getElementById('pokemons'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}